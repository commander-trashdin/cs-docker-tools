#!/bin/sh

# This script compiles/installs MCS from scratch skiping long
# OAM initialization step that is usually unnecessary for
# development. 
# The script presumes that server's source code is two directories
# above the MCS engine source.

#MDB_BUILD_TYPE=relWithDebInfo
#MDB_BUILD_TYPE=release
MDB_BUILD_TYPE=debug
#BUILD_TYPE=debug
DISTRO=$1
MCS_SCRIPTS_REPO_PREFIX=/data/cs-docker-tools
MDB_SOURCE_PATH=/data/mdb-server
MCS_SOURCE_PATH=$MDB_SOURCE_PATH/storage/columnstore
MCS_CONFIG_DIR=/etc/columnstore
$MCS_SCRIPTS_REPO_PREFIX/shells/stopcs_15
MDB_GIT_URL=https://github.com/MariaDB/server.git
MCS_GIT_URL=https://github.com/mariadb-corporation/mariadb-columnstore-engine.git
MDB_GIT_TAG=mariadb-10.5.3
MCS_GIT_TAG=develop

if [ -z "$DISTRO" ]; then
    echo "Choose a distro"
    exit 1
fi

if [ $DISTRO = 'bionic' ]; then
    sudo apt-get -y update
    apt-get -y install build-essential automake libboost-all-dev bison cmake \
    libncurses5-dev libreadline-dev \
    libperl-dev libssl-dev libxml2-dev libkrb5-dev flex libpam-dev git \
    libreadline-dev libsnappy-dev libcurl4-openssl-dev
fi

if [ ! -d $MDB_SOURCE_PATH ]; then
    git clone $MDB_GIT_URL $MDB_SOURCE_PATH -b $MDB_GIT_TAG
fi

if [ ! -d $MCS_CONFIG_DIR ]; then
    mkdir $MCS_CONFIG_DIR
fi

if [ -z "$(grep mysql /etc/passwd)" ]; then
    echo "You need to manually add mysql user into /etc/passwd, e.g. mysql:x:999:999:mysql:/var/lib/mysql:/bin/bash"
    exit 1
fi

if [ -z "$(grep mysql /etc/group)" ]; then
    echo "You need to manually add mysql group into /etc/group, e.g. mysql:x:999"
    exit 1
fi

MCS_INSTALL_PREFIX=/var/lib/
rm -rf /var/lib/columnstore/data1/*
rm -rf /var/lib/columnstore/data/
rm -rf /var/lib/columnstore/local/

MCS_TMP_DIR=/tmp/columnstore_tmp_files
TMP_PATH=/tmp
CPUS=$(getconf _NPROCESSORS_ONLN)

# script
rm -rf $MCS_TMP_DIR/*
rm -rf /var/lib/mysql

cd $MDB_SOURCE_PATH
if [ $DISTRO = 'bionic' ]; then
    #MDB_CMAKE_FLAGS='-DWITH_SYSTEMD=yes -DPLUGIN_TOKUDB=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_GSSAPI=NO -DWITH_MARIABACKUP=NO -DDEB=bionic -DPLUGIN_COLUMNSTORE=YES'
    MDB_CMAKE_FLAGS='-DWITH_SYSTEMD=yes -DPLUGIN_COLUMNSTORE=YES -DPLUGIN_MROONGA=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_TOKUDB=NO -DPLUGIN_CONNECT=NO -DPLUGIN_SPIDER=NO -DPLUGIN_OQGRAPH=NO -DPLUGIN_SPHINX=NO -DBUILD_CONFIG=mysql_release -DWITH_WSREP=OFF -DWITH_SSL=system -DDEB=bionic'
    # These flags will be available in 1.5
    #MDB_CMAKE_FLAGS="${MDB_CMAKE_FLAGS} -DWITH_GTEST=1 -DWITH_ROWGROUP_UT=1 -DWITH_DATACONVERT_UT=1 -DWITH_ARITHMETICOPERATOR_UT=1 -DWITH_ORDERBY_UT=1 -DWITH_CSDECIMAL_UT=1 -DWITH_SORTING_COMPARATORS_UT=1"
    #MDB_CMAKE_FLAGS="${MDB_CMAKE_FLAGS} -DWITH_PP_SCAN_UT=1"
    cmake . -DCMAKE_BUILD_TYPE=$MDB_BUILD_TYPE ${MDB_CMAKE_FLAGS} && \
    make -j $CPUS install
elif [ $DISTRO = 'centos' ]; then
    MDB_CMAKE_FLAGS='-DPLUGIN_TOKUDB=NO -DPLUGIN_ROCKSDB=NO -DPLUGIN_MROONGA=NO -DPLUGIN_GSSAPI=NO -DWITH_MARIABACKUP=NO -DRPM=CentOS7 -DPLUGIN_COLUMNSTORE=YES'
    cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE $MDB_CMAKE_FLAGS && \
    make -j $CPUS install
fi

if [ $? -ne 0 ]; then
    return 1
fi

mv /usr/lib/mysql/plugin/ha_columnstore.so /tmp/ha_columnstore_1.so
mv /usr/lib64/mysql/plugin/ha_columnstore.so /tmp/ha_columnstore_2.so

echo 'plugin_maturity=beta' >> /etc/my.cnf.d/columnstore.cnf

/usr/bin/mysql_install_db --rpm --user=mysql

mv /tmp/ha_columnstore_1.so /usr/lib/mysql/plugin/ha_columnstore.so
mv /tmp/ha_columnstore_2.so /usr/lib64/mysql/plugin/ha_columnstore.so

cp -r /etc/mysql/conf.d /etc/my.cnf.d/
cp $MDB_SOURCE_PATH/storage/columnstore/columnstore/oam/etc/Columnstore.xml /etc/columnstore/Columnstore.xml
cp $MDB_SOURCE_PATH/storage/columnstore/oam/etc/Columnstore.xml /etc/columnstore/Columnstore.xml
cp $MDB_SOURCE_PATH/storage/columnstore/columnstore/storage-manager/storagemanager.cnf /etc/columnstore/storagemanager.cnf
cp $MDB_SOURCE_PATH/storage/columnstore/storage-manager/storagemanager.cnf /etc/columnstore/storagemanager.cnf

if [ $DISTRO = 'bionic' ]; then
    #rm -f /lib/systemd/system/mariadb*
    cp ./support-files/*.service /lib/systemd/system/
    cp ./storage/columnstore/columnstore/oam/install_scripts/*.service /lib/systemd/system/
    cp ./storage/columnstore/oam/install_scripts/*.service /lib/systemd/system/
    cp ./debian/additions/debian-start.inc.sh /usr/share/mysql/debian-start.inc.sh
    cp ./debian/additions/debian-start /etc/mysql/debian-start
    systemctl daemon-reload
    rm -f /etc/mysql/my.cnf
    cp -r /etc/mysql/conf.d/ /etc/my.cnf.d
    chown -R mysql:mysql /var/lib/mysql
    chown -R mysql.mysql /var/run/mysqld 
    chmod +x /usr/bin/mariadb*

    ldconfig    
    columnstore-post-install

    /usr/sbin/install_mcs_mysql.sh

    mkdir /var/lib/columnstore/data1
    mkdir /var/lib/columnstore/data1/systemFiles
    mkdir /var/lib/columnstore/data1/systemFiles/dbrm

    chown -R mysql:mysql /var/log/mariadb/ 
    chmod 777 /var/log/mariadb/ 
    chmod 777 /var/log/mariadb/columnstore 

    # Populate system catalog with initial data
    #dbbuilder 7
elif [ $DISTRO = 'centos' ]; then
    cp ./support-files/*.service /lib/systemd/system/
    cp ./storage/columnstore/columnstore/oam/install_scripts/*.service /lib/systemd/system/
    cp ./storage/columnstore/oam/install_scripts/*.service /lib/systemd/system/
    systemctl daemon-reload

    rm -f /etc/mysql/my.cnf
    cp -r /etc/mysql/conf.d/ /etc/my.cnf.d
    systemctl restart mariadb 
 
    mkdir $MCS_INSTALL_PATH/data1
    mkdir $MCS_INSTALL_PATH/data1/systemFiles
    mkdir $MCS_INSTALL_PATH/data1/systemFiles/dbrm
    chmod +x /usr/bin/mariadb*
 
    columnstore-post-install

    /usr/sbin/install_mcs_mysql.sh
fi


exit 0 
